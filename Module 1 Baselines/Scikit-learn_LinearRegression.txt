#Linear Regression fits a line to data where the equation of the line is given by:
#y = B0 + B1x

#SCIKIT-LEARN API:
#Load dataset and "clean" if needed
#create features and target(s) from the data
#Import the model and instantiate the class
#Fit the model
#Apply your model; use the model to predict new values

#Data loading, cleaning, and prep for model can be done all at once before any other step

#Creating features and target(s) can also be completed right before you fit the model
#(have data in correct form before fitting)

import pandas as pd
import seaborn as sns
import numpy as np

penguins = sns.load_dataset("penguins")

print('Shape of the dataset (before removing NANs): ', penguins.shape)

penguins.dropna(inplace = True)

print('Shape of dataset (after removing NANs): ', penguins.shape)

display(penguins.head())

#Feature Matrix and Target Vector
#Before we can input our data into scikit-learn model, we have to seperate it into
#feature matrix and target array

#Decide what youre trying to predict from the dataset
#example: the feature (flipper_length_mm) will be used to predict weight (body_mass_g)

#Create feature matrix
X_penguins = penguins['flipper_length_mm']
print('The Shape pf the feature matrix: ', X_penguins.shape)

#Create target vactor
y_penguins = penguins['body_mass_g']
print('The shape of the taget vector: ', y_penguins.shape)

#scikit learn predictor is the object that learns from the data
#1)Import model class (from sklearn.linear_model import LinearRegression)
#2)Instantiate the class (creating an instance of a class) we also determine the hyperparameters

#Import predictor class
from sklearn.linear_model import LinearRegression

#Instatiate the class(with default parameters)
model = LinearRegression()

#Display
model

#The LinearRegression predictor has 4 parameters#

#3)Arrange Data

#Display the shape of X_penguins
print('Origional feature matrix: ', X_penguins.shape)

#Add new axis to create a column vector
X_penguins_2D = X_penguins[:, np.newaxis]
print(X_penguins_2D.shape)

#4) Fit the model
#model predictor already imported, class instatiated, and data is in correct format!
#now fit the model using (.fit()) method

model.fit(X_penguins_2D, y_penguins)

#5) Look at the coefficients(Slope & Intercept)

#Slope (also called the model coefficient)
print(model.coef_)

#Intercept
print(model.intercept_)

#In equation form
print(f'\n body_mass_g = {model.coef_[0]} * flipper_legth_mm + ({model.intercept_})')
